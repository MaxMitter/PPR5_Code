import turtle
import matplotlib.pyplot as plt
import matplotlib.colors as col
from HW1 import basic_library


def get_random_color(index, name='hsv'):
    """
        generates a function, that maps colors from 0 to index
    """
    return plt.cm.get_cmap(name, index)


def visualize_walk(t, walk, color, step_size=15, start_pos=(0, 0)):
    t.pensize(5)
    t.color(col.to_hex(color))
    rad = 8
    t.hideturtle()
    # set starting position
    t.penup()
    t.setpos(start_pos)
    t.pendown()

    # checks if walk is a tuple (=if it was generated by the monte_carlo function from basic_library)
    if type(walk) is tuple:
        actual_walk = walk[0]
    else:
        actual_walk = walk

    # turn turtle and move one step in direction
    for w in actual_walk:
        if w == "N":
            t.setheading(90)
        elif w == "E":
            t.setheading(0)
        elif w == "S":
            t.setheading(270)
        elif w == "W":
            t.setheading(180)
        t.forward(step_size)

    # set position for circle
    t.penup()
    t.back(rad)
    t.right(90)
    t.pendown()
    # draw circle
    t.begin_fill()
    t.circle(radius=rad)
    t.end_fill()


def visualize_walks(walks):
    tur = turtle.Turtle()
    cmap = get_random_color(len(walks))

    for i in range(len(walks)):
        start_pos = (-6 * i, -6 * i)
        walk = walks[i]
        visualize_walk(tur, walk, cmap(i), 50, start_pos)

    wn = turtle.Screen()
    from sys import platform
    if platform == 'win32':
        wn.exitonclick()

    turtle.mainloop()


########## Tests ###########

walks = basic_library.monte_carlo_walk_analysis(15, 3)
#visualize_walks(walks[1])
#visualize_walks(walks[2])
#visualize_walks(walks[3])
#visualize_walks(walks[4])
#visualize_walks(walks[5])
visualize_walks(walks[15])
